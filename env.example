# Garage Grown Gear Scraper Configuration
# Copy this file to .env and configure your actual values

# ===== REQUIRED CONFIGURATION =====

# Google Sheets Spreadsheet ID (44 characters from the URL)
# Example: https://docs.google.com/spreadsheets/d/SPREADSHEET_ID_HERE/edit
SPREADSHEET_ID=your_spreadsheet_id_here

# Google Sheets API Credentials (Base64 encoded JSON)
# Get this from your Google Cloud Console service account key
# Encode with: [Convert]::ToBase64String([IO.File]::ReadAllBytes("path/to/key.json"))
GOOGLE_SHEETS_CREDENTIALS=your_base64_encoded_credentials_here

# ===== OPTIONAL CONFIGURATION =====

# Sheet name to write data to (default: Product_Data)
SHEET_NAME=Product_Data

# Target URL to scrape (default: https://www.garagegrowngear.com/collections/sale-1)
BASE_URL=https://www.garagegrowngear.com/collections/sale-1

# ===== SCRAPING CONFIGURATION =====

# Maximum number of retry attempts (default: 3)
MAX_RETRIES=3

# Delay between retries in seconds (default: 1.0)
RETRY_DELAY=1.0

# HTTP request timeout in seconds (default: 30)
REQUEST_TIMEOUT=30

# Enable stealth mode headers (default: true)
USE_STEALTH_MODE=true

# Delay between consecutive requests in seconds (default: 1.0)
DELAY_BETWEEN_REQUESTS=1.0

# ===== LOGGING CONFIGURATION =====

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL (default: INFO)
LOG_LEVEL=INFO

# Enable logging to file (default: false)
LOG_TO_FILE=false

# Log file path (used if LOG_TO_FILE=true)
LOG_FILE_PATH=scraper.log

# ===== NOTIFICATION CONFIGURATION =====

# Enable notifications for price changes (default: false)
ENABLE_NOTIFICATIONS=false

# Webhook URL for notifications (e.g., Slack, Discord)
WEBHOOK_URL=

# Email notifications (default: false)
EMAIL_NOTIFICATIONS=false

# Price drop percentage threshold for notifications (default: 20.0)
PRICE_DROP_THRESHOLD=20.0

# ===== SETUP INSTRUCTIONS =====
#
# 1. CREATE GOOGLE CLOUD PROJECT:
#    - Go to https://console.cloud.google.com/
#    - Create a new project or select existing one
#    - Enable the Google Sheets API
#
# 2. CREATE SERVICE ACCOUNT:
#    - Go to IAM & Admin > Service Accounts
#    - Click "Create Service Account"
#    - Fill in name and description
#    - Skip role assignment (optional)
#    - Click "Done"
#
# 3. CREATE SERVICE ACCOUNT KEY:
#    - Click on the created service account
#    - Go to "Keys" tab
#    - Click "Add Key" > "Create new key"
#    - Choose "JSON" format
#    - Download the key file
#
# 4. CREATE GOOGLE SPREADSHEET:
#    - Go to https://sheets.google.com/
#    - Create a new spreadsheet
#    - Copy the spreadsheet ID from the URL
#    - Share the spreadsheet with your service account email (found in the JSON key)
#    - Give it "Editor" permissions
#
# 5. ENCODE CREDENTIALS:
#    PowerShell: [Convert]::ToBase64String([IO.File]::ReadAllBytes("path/to/your/key.json"))
#    Linux/Mac: base64 -i path/to/your/key.json
#    
# 6. SET ENVIRONMENT VARIABLES:
#    - Copy this file to .env
#    - Replace the placeholder values with your actual configuration
#    - NEVER commit .env to version control (it's in .gitignore)
#
# 7. TEST YOUR SETUP:
#    Run: python debug_google_sheets.py
